import Cocoa

//Write a function that accepts an integer from 1 through 10,000, and returns the integer square root of that number.

/*
 You can’t use Swift’s built-in sqrt() function or similar – you need to find the square root yourself.
 If the number is less than 1 or greater than 10,000 you should throw an “out of bounds” error.
 You should only consider integer square roots – don’t worry about the square root of 3 being 1.732, for example.
 If you can’t find the square root, throw a “no root” error.
*/

enum IntegerError: Error {
    case outOfBounds, noRoot
}

func mySqrt(_ num: Int) throws -> Int {
 
    var rootSquared: Int = 0
    
    if num < 1 || num > 10_000 {
     throw IntegerError.outOfBounds
    }
    for root in 1...100 {
        rootSquared = root * root
        if rootSquared == num {
            return root
        }
    }
    throw IntegerError.noRoot
}

let myNumber = 49

do {
    let result = try mySqrt(myNumber)
    print("The square root of \(myNumber) is \(result)")
} catch IntegerError.outOfBounds {
    print("Error: Number is out of bounds.")
} catch IntegerError.noRoot {
    print("Error: No valid root or no integer root.")
} catch {
    print("Something else went wrong: \(error)")
}